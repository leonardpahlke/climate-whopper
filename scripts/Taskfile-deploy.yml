version: "3"

tasks:
  whopper:
    summary: |
      Deploy the whopper infrastructure with pulumi.

      The infrastructure gets deployed to a pulumi stack with the name of the current branch.
      This gets used to initialize the project and to test changes. 
      1. The project initialization only occurs once for the main branch. Further updates are getting automatically deployed by the pulumi Kubernetes operator.
      2. Temporary feature testing can occur in two ways. 
        2.1. You can test the infrastructure manually by running this task from a feature branch (make sure to delete the infrastructure of testing is done)
        2.2. Automatically testing as part of the GitOps strategy (triggers on pull_request).
    desc: Deploy whopper infrastructure with pulumi
    dir: "{{.WHOPPER_INFRA_PATH}}"
    cmds:
      - echo "Set pulumi config"
      - pulumi config set gcp:project {{.GCP_PROJECT}}
      - pulumi config set gcp:region {{.MAIN_GCP_REGION}}
      - pulumi config set --path 'vars.zone' {{.MAIN_GCP_ZONE}} 
      - pulumi config set --path 'vars.region' {{.MAIN_GCP_REGION}} 
      - pulumi config set --path 'vars.initialNodeCount' {{.ZONE_NODE_COUNT}} 
      - pulumi config set --path 'vars.machineType' {{.MACHINE_TYPE}} 
      - pulumi config set project {{.GCP_PROJECT}} 
      - pulumi config set env {{.ENV}}
      - echo "Deploy infrastructure"
      - pulumi up -s {{.ENV}} -y
      - task: pull-whopper-config
    sources:
      - "{{.WHOPPER_INFRA_PATH}}/**/*.ts"
    vars:
      ZONE_NODE_COUNT: 1 # (ZONE_NODE_COUNT * COUNT_ZONES_IN_REGION) = NUMBER_OF_NODES
      MACHINE_TYPE: "n1-standard-1"

  operator:
    summary: |
      Deploy the whopper operator with pulumi.

      The infrastructure gets deployed to a pulumi stack with the name of the current branch.
      This should only get deployed once at project initialization as it isn't used for manual testing. 
    dir: "{{.OPERATOR_INFRA_PATH}}"
    silent: true
    cmds:
      - echo "Set pulumi config"
      - pulumi config set gcp:project {{.GCP_PROJECT}}
      - pulumi config set gcp:zone {{.MAIN_GCP_ZONE}}
      - pulumi config set project {{.GCP_PROJECT}}
      - pulumi config set zone {{.MAIN_GCP_ZONE}}
      - pulumi config set initialNodeCount {{.ZONE_NODE_COUNT}}
      - pulumi config set machineType {{.MACHINE_TYPE}}
      - pulumi config set clusterName {{.CLUSTER_NAME}}
      - echo "Deploy infrastructure"
      - pulumi up -s {{.ENV}} -y
      - task: pull-operator-config
    sources:
      - "{{.OPERATOR_INFRA_PATH}}/**/*.ts"
    vars:
      MACHINE_TYPE: "n1-standard-1"
      CLUSTER_NAME: "operator-cluster"
      ZONE_NODE_COUNT: 1

  pull-operator-config:
    dir: "{{.OPERATOR_INFRA_PATH}}"
    cmds:
      - KUBECONFIG={{.LOCAL_OPERATOR_KUBECONFIG_PATH}} gcloud container clusters get-credentials {{.CLUSTER_NAME}} --zone={{.CLUSTER_ZONE}} --project {{.GCP_PROJECT}}
    generates:
      - "{{.LOCAL_OPERATOR_KUBECONFIG_PATH}}"
    silent: true
    vars:
      CLUSTER_NAME:
        sh: pulumi stack output "clusterName"
      CLUSTER_ZONE:
        sh: pulumi stack output "clusterZone"

  pull-whopper-config:
    dir: "{{.WHOPPER_INFRA_PATH}}"
    summary: |
      Pull the kubeconfig of the created whopper cluster to interact with the kubernetes cluster.

      This task gets automatically run whenever the whopper infrastructure gets deployed.
      The kubeconfig gets stored to {{.LOCAL_WHOPPER_KUBECONFIG_PATH}}.
      The task 'kubectl-w' wrap's your kubectl and refers to the local whopper automatically by specifying the flag '--kubeconfig'.
    desc: Pull kubeconfig to access whopper cluster
    cmds:
      - KUBECONFIG={{.LOCAL_WHOPPER_KUBECONFIG_PATH}} gcloud container clusters get-credentials {{.CLUSTER_NAME}} --region={{.CLUSTER_REGION}} --project {{.GCP_PROJECT}}
    generates:
      - "{{.LOCAL_WHOPPER_KUBECONFIG_PATH}}"
    vars:
      CLUSTER_NAME:
        sh: pulumi stack output "clusterName"
      CLUSTER_REGION:
        sh: pulumi stack output "clusterRegion"

  container-image-push:
    summary: |
      Push a container image to quay.io

      Tags can be set as variable "V"
    desc: Push a golang container to quay.io
    cmds:
      - ./scripts/push/container-images.sh {{.V}} {{.REPOSITORY}}
    vars:
      V: "latest"
      REPOSITORY: "quay.io/leonardpahlke"