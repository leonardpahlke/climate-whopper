// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/v1/discoverer/discoverer.proto

package discoverer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscovererClient is the client API for Discoverer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscovererClient interface {
	Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error)
	List(ctx context.Context, in *ListDiscovererRequest, opts ...grpc.CallOption) (*ListDiscovererResponse, error)
	Get(ctx context.Context, in *GetDiscovererRequest, opts ...grpc.CallOption) (*DiscoveredArticle, error)
	GetNewspapers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNewspapersResponse, error)
	// Get a list of parsers that can be used to parse a newspaper website
	// Its possible to have multiple parsers per website
	GetParsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetParsersResponse, error)
	Update(ctx context.Context, in *DiscoveredArticle, opts ...grpc.CallOption) (*DiscoveredArticle, error)
	Delete(ctx context.Context, in *DeleteDiscoveredArticleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type discovererClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscovererClient(cc grpc.ClientConnInterface) DiscovererClient {
	return &discovererClient{cc}
}

func (c *discovererClient) Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error) {
	out := new(DiscoverResponse)
	err := c.cc.Invoke(ctx, "/whopper.api.v1.Discoverer/Discover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discovererClient) List(ctx context.Context, in *ListDiscovererRequest, opts ...grpc.CallOption) (*ListDiscovererResponse, error) {
	out := new(ListDiscovererResponse)
	err := c.cc.Invoke(ctx, "/whopper.api.v1.Discoverer/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discovererClient) Get(ctx context.Context, in *GetDiscovererRequest, opts ...grpc.CallOption) (*DiscoveredArticle, error) {
	out := new(DiscoveredArticle)
	err := c.cc.Invoke(ctx, "/whopper.api.v1.Discoverer/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discovererClient) GetNewspapers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNewspapersResponse, error) {
	out := new(GetNewspapersResponse)
	err := c.cc.Invoke(ctx, "/whopper.api.v1.Discoverer/GetNewspapers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discovererClient) GetParsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetParsersResponse, error) {
	out := new(GetParsersResponse)
	err := c.cc.Invoke(ctx, "/whopper.api.v1.Discoverer/GetParsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discovererClient) Update(ctx context.Context, in *DiscoveredArticle, opts ...grpc.CallOption) (*DiscoveredArticle, error) {
	out := new(DiscoveredArticle)
	err := c.cc.Invoke(ctx, "/whopper.api.v1.Discoverer/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discovererClient) Delete(ctx context.Context, in *DeleteDiscoveredArticleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/whopper.api.v1.Discoverer/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscovererServer is the server API for Discoverer service.
// All implementations must embed UnimplementedDiscovererServer
// for forward compatibility
type DiscovererServer interface {
	Discover(context.Context, *DiscoverRequest) (*DiscoverResponse, error)
	List(context.Context, *ListDiscovererRequest) (*ListDiscovererResponse, error)
	Get(context.Context, *GetDiscovererRequest) (*DiscoveredArticle, error)
	GetNewspapers(context.Context, *emptypb.Empty) (*GetNewspapersResponse, error)
	// Get a list of parsers that can be used to parse a newspaper website
	// Its possible to have multiple parsers per website
	GetParsers(context.Context, *emptypb.Empty) (*GetParsersResponse, error)
	Update(context.Context, *DiscoveredArticle) (*DiscoveredArticle, error)
	Delete(context.Context, *DeleteDiscoveredArticleRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDiscovererServer()
}

// UnimplementedDiscovererServer must be embedded to have forward compatible implementations.
type UnimplementedDiscovererServer struct {
}

func (UnimplementedDiscovererServer) Discover(context.Context, *DiscoverRequest) (*DiscoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discover not implemented")
}
func (UnimplementedDiscovererServer) List(context.Context, *ListDiscovererRequest) (*ListDiscovererResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDiscovererServer) Get(context.Context, *GetDiscovererRequest) (*DiscoveredArticle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDiscovererServer) GetNewspapers(context.Context, *emptypb.Empty) (*GetNewspapersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewspapers not implemented")
}
func (UnimplementedDiscovererServer) GetParsers(context.Context, *emptypb.Empty) (*GetParsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParsers not implemented")
}
func (UnimplementedDiscovererServer) Update(context.Context, *DiscoveredArticle) (*DiscoveredArticle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDiscovererServer) Delete(context.Context, *DeleteDiscoveredArticleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDiscovererServer) mustEmbedUnimplementedDiscovererServer() {}

// UnsafeDiscovererServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscovererServer will
// result in compilation errors.
type UnsafeDiscovererServer interface {
	mustEmbedUnimplementedDiscovererServer()
}

func RegisterDiscovererServer(s grpc.ServiceRegistrar, srv DiscovererServer) {
	s.RegisterService(&Discoverer_ServiceDesc, srv)
}

func _Discoverer_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscovererServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whopper.api.v1.Discoverer/Discover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscovererServer).Discover(ctx, req.(*DiscoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discoverer_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiscovererRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscovererServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whopper.api.v1.Discoverer/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscovererServer).List(ctx, req.(*ListDiscovererRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discoverer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscovererRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscovererServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whopper.api.v1.Discoverer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscovererServer).Get(ctx, req.(*GetDiscovererRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discoverer_GetNewspapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscovererServer).GetNewspapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whopper.api.v1.Discoverer/GetNewspapers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscovererServer).GetNewspapers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discoverer_GetParsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscovererServer).GetParsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whopper.api.v1.Discoverer/GetParsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscovererServer).GetParsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discoverer_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveredArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscovererServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whopper.api.v1.Discoverer/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscovererServer).Update(ctx, req.(*DiscoveredArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discoverer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiscoveredArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscovererServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whopper.api.v1.Discoverer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscovererServer).Delete(ctx, req.(*DeleteDiscoveredArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Discoverer_ServiceDesc is the grpc.ServiceDesc for Discoverer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Discoverer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "whopper.api.v1.Discoverer",
	HandlerType: (*DiscovererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Discover",
			Handler:    _Discoverer_Discover_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Discoverer_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Discoverer_Get_Handler,
		},
		{
			MethodName: "GetNewspapers",
			Handler:    _Discoverer_GetNewspapers_Handler,
		},
		{
			MethodName: "GetParsers",
			Handler:    _Discoverer_GetParsers_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Discoverer_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Discoverer_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/discoverer/discoverer.proto",
}
