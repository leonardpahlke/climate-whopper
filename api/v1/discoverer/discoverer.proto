// Copyright 2022 Leonard Vincent Simon Pahlke
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "whopper/pkg/api/v1/discoverer";

package whopper.api.v1;

import "google/protobuf/empty.proto";
import "google/api/field_behavior.proto";
import "google/api/annotations.proto";
import "api/v1/whopper.proto";


//
// DISCOVERER API
//
// The discoverer processes multiple requests to reduce traffic
service Discoverer {
    rpc Discover (DiscoverRequest) returns (DiscoverResponse) {
        option (google.api.http) = {
            post: "/v1/{newspaper=newspapers/*}"
            body: "discoverRequest"
        };
    }
    rpc List (ListDiscovererRequest) returns (ListDiscovererResponse){
        option (google.api.http) = {
            get: "/v1/{newspaper=newspapers/*}/articles"
        };
    }
    rpc Get (GetDiscovererRequest) returns (DiscoveredArticle) {
        option (google.api.http) = {
            get: "/v1/{newspaper=newspapers/*/articles/*}"
        };
    }
    rpc GetNewspapers (google.protobuf.Empty) returns (GetNewspapersResponse) {
        option (google.api.http) = {
            get: "/v1/newspapers"
        };
    }
    // Get a list of parsers that can be used to parse a newspaper website
    // Its possible to have multiple parsers per website
    rpc GetParsers (google.protobuf.Empty) returns (GetParsersResponse) {
        option (google.api.http) = {
            get: "/v1/parsers"
        };
    }
    rpc Update (DiscoveredArticle) returns (DiscoveredArticle){
        option (google.api.http) = {
            patch: "/v1/{discoveredArticle.newspaper=newspapers/*/discoveredArticle.id=ids/*/articles/*}"
            body: "discoveredArticle"
        };
    }
    rpc Delete (DeleteDiscoveredArticleRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
            delete: "/v1/{newspaper=newspapers/*/id=ids/*/articles/*}"
        };
    }
}

// General article information which is provided by the article discoverer
message DiscoveredArticle {
    // Id of the article (unique)
    string id = 1;
    // URL which leads to the article text
    string url = 2;
    // article release date
    string releaseDate = 3;
    // Title of the article
    string title = 4;
    // Subtitle of the article
    string subtitle = 5;
    // General description of the article
    string description = 6;
    // Category of the article on the newspaper
    string category = 7;
    // Article newspaper
    string newspaper = 8;
    // Meta information set for the stored entry
    Meta entry_meta = 9;
}

// List
message ListDiscovererRequest {
    // The parent should be set to a newspaper
    string newspaper = 1 [(google.api.field_behavior) = REQUIRED];
    // The maximum number of items to return.
    int32 page_size = 2 [(google.api.field_behavior) = REQUIRED];
    // The next_page_token value returned from a previous List request, if any.
    string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}
message ListDiscovererResponse {
    repeated DiscoveredArticle discovered_articles = 1;
    // Token to retrieve the next page of results, or empty if there are no
    // more results in the list.
    string next_page_token = 2;
    Status status = 3;
}

// Get
message GetDiscovererRequest {
    // Newspaper of the requested article
    string newspaper = 1 [(google.api.field_behavior) = REQUIRED];
    // Id of the requested article 
    string id = 2 [(google.api.field_behavior) = REQUIRED];
}
message GetNewspapersResponse {
    repeated Newspaper newspapers = 1;
}
message GetParsersResponse {
    repeated Parser parsers = 1;
}


// Discover
message DiscoverRequest {
    // Newspaper to start the discovery
    string newspaper = 1 [(google.api.field_behavior) = REQUIRED];
}
message DiscoverResponse {
    repeated DiscoveredArticle articles = 1;
    Status status = 2;
}

// Delete
message DeleteDiscoveredArticleRequest {
    // Newspaper of the article that should get deleted
    string newspaper = 1 [(google.api.field_behavior) = REQUIRED];
    // Id of the article that should get deleted
    string id = 2 [(google.api.field_behavior) = REQUIRED];
}