// Copyright 2022 Leonard Vincent Simon Pahlke
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "whopper/pkg/api/v1;whopper";

package whopper.api.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/rpc/code.proto";

// Error Model; see https://cloud.google.com/apis/design/errors
// message Status example:
// {
//   "error": {
//     "code": 400,
//     "message": "API key not valid. Please pass a valid API key.",
//     "status": "INVALID_ARGUMENT",
//     "details": [
//       {
//         "@type": "type.googleapis.com/google.rpc.ErrorInfo",
//         "reason": "API_KEY_INVALID",
//         "domain": "googleapis.com",
//         "metadata": {
//           "service": "translate.googleapis.com"
//         }
//       }
//     ]
//   }
// }
message Status {
  // A simple error code that can be easily handled by the client. The
  // actual error code is defined by `google.rpc.Code`.
  google.rpc.Code code = 1;
  // A developer-facing human-readable error message in English. It should
  // both explain the error and offer an actionable resolution to it.
  string message = 2;
  // Additional error information that the client code can use to handle
  // the error, such as retry info or a help link.
  repeated google.protobuf.Any details = 3;
}

message Meta {
  // Timestamp when the entity has been stored
  google.protobuf.Timestamp created_at = 1;
  // Timestamp when the article has been updated
  google.protobuf.Timestamp updated_at = 2;
  // Name of the service that stored this entry -- usefull to differntiate entries if multiple services use the same DB 
  string service = 3;
}

// A newspaper website parser 
message Parser {
  string name = 1;
}

// Group type
message Group {
  string name = 1;
}

// Article ID type
message ID {
  // primary identifier of the website
  string id = 1;
  // secondary identifier since the ID might be only unique at group scope (group/newspaper)
  Group group = 2;
}


//
// gRPC API's
//

// Hub
service Hub {
  rpc RunHub (google.protobuf.Empty) returns (google.protobuf.Empty) {}
}
