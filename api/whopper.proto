// Copyright 2022 Leonard Vincent Simon Pahlke
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/leonardpahlke/climatewhopper/api";

package whopper.api;

import "google/protobuf/timestamp.proto";
import "google/cloud/language/v1/language_service.proto";

// Status request processing
enum Status {
  // 200 expected behaviour
  OK = 0;
  // 500 could not process but archive error trace
  ERROR = 1;
  // 200 unexpected events occured during processing but no errors
  WARNING = 2;
  // 400 faulty invoke information provided
  INVALID = 3;
}

message Head {
  // status of the request
  Status status = 1;
  // additional information about the status, like - status:"OK" status_message:"website resources have been downloaded and stored successful"
  string status_message = 2;
  // timestamp like "1972-01-01T10:00:20.021Z"
  google.protobuf.Timestamp timestamp = 3;
}


//
// gRPC API's
//

// Hub
service Hub {
  rpc RunHub (HubRequest) returns (HubResponse) {}
}
message HubRequest {
  repeated string newspapers = 2;
}
message HubResponse {
  Head head = 4;
}

// Discoverer
// The discoverer processes multiple requests to reduce traffic
service Discoverer {
  rpc Discover (DiscovererRequest) returns (DiscovererResponse) {}
}
message DiscovererRequest {
  repeated InDiscovererInfo info = 1;
}
message DiscovererResponse {
  repeated ArticleHead articles = 1;
  Head head = 2;
}
// request data
message InDiscovererInfo {
  string newspaper = 1;
  string url = 2;
  int64 latestId = 3;
}
// response data
message OutDiscovererInfo {
  repeated ArticleHead newArticleHeads = 2;
}


// Downloader
service Downloader {
  rpc Download (DownloadRequest) returns (DownloadResponse) {}
}
//  INFO: only the URL is needed to download resources from a website
//  the additional information, id and newspaper is used to async match the request
message DownloadRequest {
  string id = 1;
  string url = 2;
}
message DownloadResponse {
  // request id / article id
  string id = 1;
  // html website data
  ArticleFooter articleFooter = 2;
  // response head
  Head head = 3;
}

// Parser
service Parser {
  rpc Parse (ParserRequest) returns (ParserResponse) {}
}
message ParserRequest {
  string id = 1;
  string newspaper = 2;
  string rawArticle = 3;
}
message ParserResponse {
  string id = 1;
  string newspaper = 2;
  ArticleBody text = 3;
  Head head = 4;
}

// Translator
service Translator {
  rpc Translate (TranslatorRequest) returns (TranslatorResponse) {}
}
message TranslatorRequest {
  string id = 1;
  string text = 2;
}
message TranslatorResponse {
  string id = 1;
  string translatedText = 2;
  Head head = 3;
}

// Analyzer
service Analyzer {
  rpc Analyze (AnalyzerRequest) returns (AnalyzerResponse) {}
}
message AnalyzerRequest {
  string id = 1;
  string text = 2;
}
message AnalyzerResponse {
  string id = 1;
  ArticleAnalytics articleAnalytics = 2;
  Head head = 3;
}


//
// DATA-MODELS
//

message Newspaper {
  // Name of the newspaper
  string name = 1;
  // URLs which will be fet into the discoverer
  repeated string articleDiscoveryUrls = 2;
}

// Structure of an newspaper article 
message Article {
  ArticleHead head = 1;
  ArticleBody body = 2;
  ArticleAnalytics analytics = 3;
  ArticleFooter footer = 4;
}

// General article information which is provided by the article discoverer
message ArticleHead {
  // Id of the article (unique)
  int64 id = 1;
  // URL which leads to the article text
  string url = 2;
  // article release date
  string releaseDate = 3;
  // Title of the article
  string title = 4;
  // Subtitle of the article
  string subtitle = 5;
  // General description of the article
  string description = 6;
  // Category of the article on the newspaper
  string category = 7;
}

// This information is provided by the article parser / article translator
message ArticleBody {
  // Article text how it is written on the website
  string originalText = 1;
  // Article text translated if the original language is not english
  string translatedText = 2;
  // Tells if the article has been translated
  bool articletranslated = 3;
  // Original language of the article
  string originalLanguage = 4;
  // Some newspapers 
  repeated string tags = 5;
}

// This information is provided by the article parser / article translator
message ArticleFooter {
  // Article data which has not been parsed or processed yet
  string rawArticleText = 1;
}

// This information is provided by the article analyzer
message ArticleAnalytics {
  google.cloud.language.v1.AnalyzeEntitiesResponse analyzeEntitiesResponse = 1;
  google.cloud.language.v1.AnalyzeSentimentResponse analyzeSentimentResponse = 2;
}
