syntax = "proto3";

import "google/protobuf/timestamp.proto";

option go_package = "github.com/leonardpahlke/climatewhopper/pkg/api";

//
//
// GENERAL PORPUSE STUFF
//
//


// Status request processing
enum Status {
  // 200 expected behaviour
  OK = 0;
  // 500 could not process but archive error trace
  ERROR = 1;
  // 200 unexpected events occured during processing but no errors
  WARNING = 2;
  // 400 faulty invoke information provided
  INVALID = 3;
}

message Head {
  // status of the request
  Status status = 1;
  // additional information about the status, like - status:"OK" status_message:"website resources have been downloaded and stored successful"
  string status_message = 2;
  // timestamp like "1972-01-01T10:00:20.021Z"
  google.protobuf.Timestamp timestamp = 3;
}


//
// gRPC API's
//

// Hub
service Hub {
  rpc RunHub (HubRequest) returns (HubResponse) {}
}
message HubRequest {
  repeated string newspapers = 2;
}
message HubResponse {
  Head head = 4;
}

// Discoverer
service Discoverer {
  rpc Discover (DiscovererRequest) returns (DiscovererResponse) {}
}
message DiscovererRequest {
  string newspaper = 1;
  string latestId = 2;
}
message DiscovererResponse {
  bool newArticlesFound = 1;
  string newspaper = 2;
  repeated string articleWebsites = 3;
  Head head = 4;
}


// Downloader
service Downloader {
  rpc Download (DownloadRequest) returns (DownloadResponse) {}
}
//  INFO: only the URL is needed to download resources from a website
//  the additional information, id and newspaper is used to async match the request
message DownloadRequest {
  string id = 1;
  string url = 2;
}
message DownloadResponse {
  // request id / article id
  string id = 1;
  // html website data
  bytes data = 2;
  // response head
  Head head = 3;
}

// Parser
service Parser {
  rpc Parse (ParserRequest) returns (ParserResponse) {}
}
message ParserRequest {
  string id = 1;
  string newspaper = 2;
  string url = 3;
}
message ParserResponse {
  string id = 1;
  string newspaper = 2;
  bytes text = 3;
  Head head = 4;
}

// Translator
service Translator {
  rpc Translate (TranslatorRequest) returns (TranslatorResponse) {}
}
message TranslatorRequest {
  string id = 1;
  string text = 2;
  string targetLanguage = 3;
}
message TranslatorResponse {
  string id = 1;
  bytes translatedText = 2;
  Head head = 3;
}

// Analyzer
service Analyzer {
  rpc Analyze (AnalyzerRequest) returns (AnalyzerResponse) {}
}
message AnalyzerRequest {
  string id = 1;
  string text = 2;
}
message AnalyzerResponse {
  string id = 1;
  bytes data = 2;
  Head head = 3;
}


//
// DATA-MODELS
//

// TODO: ...